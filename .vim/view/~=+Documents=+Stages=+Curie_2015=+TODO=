let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <expr> <S-Tab> org#tbl#kbd_shift_tab()
imap <buffer> <silent> <C-S-CR> =OrgNewHead('levelup',1)
imap <buffer> <silent> <C-CR> =OrgNewHead('leveldown',1)
imap <buffer> <silent> <S-CR> =OrgNewHead('same',1)
nnoremap <buffer> <silent> 	 :call OrgCycle()
noremap <buffer>  
nnoremap <buffer> <silent>  :call OrgEnterFunc()
noremap <buffer>  
onoremap <buffer> <silent> ,rf :call StartR("R")
nnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
noremap <buffer> <silent> ,aa :call OrgRunAgenda(strftime("%Y-%m-%d"),'w,'+ANY_TODO')
noremap <buffer> <silent> ,ae :call SendFileToR("echo")
noremap <buffer> <silent> ,ao :call ShowRout()
noremap <buffer> <silent> ,ks :call RSpin()
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,sd :call SendSelectionToR("silent", "down")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> ,d :call OrgDateDashboard()
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,rf :call StartR("R")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,rd :call RSetWD()
nmap <buffer> ,,q :call OrgMoveLevel(line('.'),'up',v:count1)
nmap <buffer> <silent> ,t :call OrgTodoDashboard()
nnoremap <buffer> <silent> ,ci :call OrgClockIn(line("."))
nnoremap <buffer> <silent> ,co :call OrgClockOut()
noremap <buffer> ,x :call OrgExportDashboard()
noremap <buffer> ,b :call OrgTableDashboard()
noremap <buffer> <silent> ,a* :call OrgRunAgenda(strftime("%Y-%m-%d"),'w,'')
noremap <buffer> <silent> ,at :call OrgRunAgenda(strftime("%Y-%m-%d"),'w,'+UNFINISHED_TODOS')
noremap <buffer> <silent> ,ad :call OrgRunAgenda(strftime("%Y-%m-%d"),'w,'+FINISHED_TODOS')
noremap <buffer> <silent> ,ag :call OrgAgendaDashboard()
noremap <buffer> <silent> ,ac :call OrgCustomSearchMenu()
nnoremap <buffer> <silent> ,et :call OrgTagsEdit()
nnoremap <buffer> <silent> ,cs :let @/=''
noremap <buffer> ,r :call OrgRefileDashboard()
noremap <buffer> <silent> ,v :silent call OrgEval()
noremap <buffer> <silent> ,0 :call OrgExpandWithoutText(99999)
noremap <buffer> <silent> ,9 :call OrgExpandWithoutText(9)
noremap <buffer> <silent> ,8 :call OrgExpandWithoutText(8)
noremap <buffer> <silent> ,7 :call OrgExpandWithoutText(7)
noremap <buffer> <silent> ,6 :call OrgExpandWithoutText(6)
noremap <buffer> <silent> ,5 :call OrgExpandWithoutText(5)
noremap <buffer> <silent> ,4 :call OrgExpandWithoutText(4)
noremap <buffer> <silent> ,3 :call OrgExpandWithoutText(3)
noremap <buffer> <silent> ,2 :call OrgExpandWithoutText(2)
noremap <buffer> <silent> ,1 :call OrgExpandWithoutText(1)
noremap <buffer> <silent> ,  :call OrgExpandWithoutText(1)
nnoremap <buffer> <expr> ,/ '/^\*\{1,' . &foldlevel . '\} .*'
nnoremap <buffer> <expr> ,? '?^\*\{1,' . &foldlevel . '\} .*'
noremap <buffer> <silent> ,,0 :call OrgShowSubs(12,0)
noremap <buffer> <silent> ,,9 :call OrgShowSubs(9,0)
noremap <buffer> <silent> ,,8 :call OrgShowSubs(8,0)
noremap <buffer> <silent> ,,7 :call OrgShowSubs(7,0)
noremap <buffer> <silent> ,,6 :call OrgShowSubs(6,0)
noremap <buffer> <silent> ,,5 :call OrgShowSubs(5,0)
noremap <buffer> <silent> ,,4 :call OrgShowSubs(4,0)
noremap <buffer> <silent> ,,3 :call OrgShowSubs(3,0)
noremap <buffer> <silent> ,,2 :call OrgShowSubs(2,0)
noremap <buffer> <silent> ,,1 :call OrgShowSubs(1,0)
noremap <buffer> <silent> ,,; :call OrgShowSubs(1,0)
nnoremap <buffer> <silent> ,na :call NarrowCodeBlock(line('.'))
nnoremap <buffer> <silent> ,m :call OrgColumnsDashboard()
nnoremap <buffer> <silent> ,le :call EditLink()
nnoremap <buffer> <silent> ,lf :call FollowLink(OrgGetLink())
nnoremap <buffer> <silent> ,ln :/]]
nnoremap <buffer> <silent> ,lp :?]]
nnoremap <buffer> <silent> ,lc :set conceallevel=3|set concealcursor=nc
nnoremap <buffer> <silent> ,la :set conceallevel=3|set concealcursor=c
nnoremap <buffer> <silent> ,lx :set conceallevel=0
nnoremap <buffer> <silent> ,	 :call OrgGlobalCycle()
nnoremap <buffer> <silent> ,zu :call OrgNavigateLevels("up")
nnoremap <buffer> <silent> ,zd :call OrgNavigateLevels("down")
nnoremap <buffer> <silent> ,zl :call OrgNavigateLevels("left")
nnoremap <buffer> <silent> ,zr :call OrgNavigateLevels("right")
nnoremap <buffer> <silent> ,zL :call OrgMoveLevel(line("."),'left')
nnoremap <buffer> <silent> ,zR :call OrgMoveLevel(line("."),'right')
nnoremap <buffer> <silent> ,k :call OrgMoveLevel(line("."),'up',v:count1)
nnoremap <buffer> <silent> ,j :call OrgMoveLevel(line("."),'down',v:count1)
nnoremap <buffer> <silent> ,np :call OrgNewHead('levelup')
nnoremap <buffer> <silent> ,ns :call OrgNewHead('leveldown')
nnoremap <buffer> gqq :OrgTableAlignQ
nnoremap <buffer> gww :OrgTableAlignW
nnoremap <buffer> <silent> zc :call OrgDoSingleFold(line("."))
nnoremap <buffer> <silent> <S-Tab> :call OrgGlobalCycle()
nnoremap <buffer> <silent> <S-Up> :call OrgDateInc(1)
nnoremap <buffer> <silent> <S-Down> :call OrgDateInc(-1)
nnoremap <buffer> <silent> <2-LeftMouse> :call OrgMouseDate()
nnoremap <buffer> <silent> <C-S-CR> :call OrgNewHead('levelup')
nnoremap <buffer> <silent> <C-CR> :call OrgNewHead('leveldown')
nnoremap <buffer> <silent> <C-Left> :call OrgShowLess(line("."))
nnoremap <buffer> <silent> <C-Right> :call OrgShowMore(line("."))
nnoremap <buffer> <silent> <M-C-Left> :call OrgMoveLevel(line("."),'left')
nnoremap <buffer> <silent> <M-C-Right> :call OrgMoveLevel(line("."),'right')
nnoremap <buffer> <silent> <M-C-Up> :call OrgMoveLevel(line("."),'up',v:count1)
nnoremap <buffer> <silent> <M-C-Down> :call OrgMoveLevel(line("."),'down',v:count1)
nnoremap <buffer> <silent> <M-End> :call OrgNavigateLevels("end")
nnoremap <buffer> <silent> <M-Home> :call OrgNavigateLevels("home")
nnoremap <buffer> <silent> <M-Up> :call OrgNavigateLevels("up")
nnoremap <buffer> <silent> <M-Down> :call OrgNavigateLevels("down")
nnoremap <buffer> <silent> <M-Left> :call OrgNavigateLevels("left")
nnoremap <buffer> <silent> <M-Right> :call OrgNavigateLevels("right")
inoremap <buffer> <expr> 	 org#tbl#kbd_tab()
inoremap <buffer> <expr>  org#tbl#kbd_cr()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,rf :call StartR("R")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,aa :call SendFileToR("silent")a
inoremap <buffer> <silent> ,ae :call SendFileToR("echo")a
inoremap <buffer> <silent> ,ao :call ShowRout()a
inoremap <buffer> <silent> ,ks :call RSpin()a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,rd :call RSetWD()a
imap <buffer> <silent> _ :call ReplaceUnderS()a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO::\ -,mO::\ \ ,eO:::,::,sO:>\ -,mO:>\ \ ,eO:>>,:>
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=nc
setlocal conceallevel=3
setlocal completefunc=Mycfu
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'TODO'
setlocal filetype=TODO
endif
setlocal foldcolumn=1
setlocal foldenable
setlocal foldexpr=OrgFoldLevel(v:lnum)
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=OrgFoldText()
setlocal formatexpr=
setlocal formatoptions=qtcwn
setlocal formatlistpat=^\\s*\\d\\+\\.\\s\\+\\|^\\s*\\-\\s\\+
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=^\\s*\\(from\\|import\\)
setlocal includeexpr=substitute(v:fname,'\\.','/','g')
setlocal indentexpr=GetOrgIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=38,42,43,45,47-58,60-62,64-90,97-122,_
setlocal keywordprg=pydoc
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=rcomplete#CompleteR
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=.py
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'TODO'
setlocal syntax=TODO
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=78
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=0
let s:l = 8 - ((7 * winheight(0) + 17) / 34)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
8
normal! 04|
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
